// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using workspace.Models;

#nullable disable

namespace workspace.Migrations
{
    [DbContext(typeof(WorkspaceContext))]
    [Migration("20241207160329_tok")]
    partial class tok
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("workspace.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("workspace.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ActiveToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("workspace.Models.Cour", b =>
                {
                    b.Property<string>("IdCour")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Chapitre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateHeure")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnseignantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MatiereId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdCour");

                    b.HasIndex("EnseignantId");

                    b.HasIndex("MatiereId");

                    b.ToTable("Cours");
                });

            modelBuilder.Entity("workspace.Models.Enseignant", b =>
                {
                    b.Property<string>("IdEnseignant")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AnneesExperience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEmbauche")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diplome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specialite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdEnseignant");

                    b.HasIndex("FormationId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Enseignants");
                });

            modelBuilder.Entity("workspace.Models.Etudiant", b =>
                {
                    b.Property<string>("IdEtudiant")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Classe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateInscription")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Niveau")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdEtudiant");

                    b.HasIndex("FormationId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Etudiants");
                });

            modelBuilder.Entity("workspace.Models.Formation", b =>
                {
                    b.Property<string>("IdFormation")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duree")
                        .HasColumnType("int");

                    b.Property<float?>("Prix")
                        .HasColumnType("real");

                    b.Property<string>("Titre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFormation");

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("workspace.Models.Matiere", b =>
                {
                    b.Property<string>("IdMatiere")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NomMatiere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VolumeHoraire")
                        .HasColumnType("int");

                    b.HasKey("IdMatiere");

                    b.HasIndex("FormationId");

                    b.HasIndex("SalleId");

                    b.ToTable("Matieres");
                });

            modelBuilder.Entity("workspace.Models.Salle", b =>
                {
                    b.Property<string>("IdSalle")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Capacite")
                        .HasColumnType("int");

                    b.Property<string>("Equipement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomSalle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeSalle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSalle");

                    b.ToTable("Salles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("workspace.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("workspace.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("workspace.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("workspace.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workspace.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("workspace.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("workspace.Models.Cour", b =>
                {
                    b.HasOne("workspace.Models.Enseignant", "Enseignant")
                        .WithMany("Cours")
                        .HasForeignKey("EnseignantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workspace.Models.Matiere", "Matiere")
                        .WithMany("Cours")
                        .HasForeignKey("MatiereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enseignant");

                    b.Navigation("Matiere");
                });

            modelBuilder.Entity("workspace.Models.Enseignant", b =>
                {
                    b.HasOne("workspace.Models.Formation", "Formation")
                        .WithMany("ListeEnseignants")
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("workspace.Models.ApplicationUser", "User")
                        .WithOne("Enseignant")
                        .HasForeignKey("workspace.Models.Enseignant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("workspace.Models.Etudiant", b =>
                {
                    b.HasOne("workspace.Models.Formation", "Formation")
                        .WithMany("ListeEtudiants")
                        .HasForeignKey("FormationId");

                    b.HasOne("workspace.Models.ApplicationUser", "User")
                        .WithOne("Etudiant")
                        .HasForeignKey("workspace.Models.Etudiant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("workspace.Models.Matiere", b =>
                {
                    b.HasOne("workspace.Models.Formation", "Formation")
                        .WithMany("ListeMatieres")
                        .HasForeignKey("FormationId");

                    b.HasOne("workspace.Models.Salle", "Salle")
                        .WithMany("Matieres")
                        .HasForeignKey("SalleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");

                    b.Navigation("Salle");
                });

            modelBuilder.Entity("workspace.Models.ApplicationUser", b =>
                {
                    b.Navigation("Enseignant")
                        .IsRequired();

                    b.Navigation("Etudiant")
                        .IsRequired();
                });

            modelBuilder.Entity("workspace.Models.Enseignant", b =>
                {
                    b.Navigation("Cours");
                });

            modelBuilder.Entity("workspace.Models.Formation", b =>
                {
                    b.Navigation("ListeEnseignants");

                    b.Navigation("ListeEtudiants");

                    b.Navigation("ListeMatieres");
                });

            modelBuilder.Entity("workspace.Models.Matiere", b =>
                {
                    b.Navigation("Cours");
                });

            modelBuilder.Entity("workspace.Models.Salle", b =>
                {
                    b.Navigation("Matieres");
                });
#pragma warning restore 612, 618
        }
    }
}
